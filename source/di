58,59d57
<       use angbnd
<       use bndstr
62d59
<       use cflux
70d66
<       use math
74d69
<       use potent
135,161d129
< !     charge flux variables
<       real*8, allocatable :: damppot(:)
<       real*8 term1i,term2i,term3i
<       real*8 term1k,term2k,term3k
<       real*8 poti,potk
<       real*8 pjb
<       real*8 xa,ya,za
<       real*8 xb,yb,zb
<       real*8 xc,yc,zc
<       real*8 xba,yba,zba
<       real*8 xbc,ybc,zbc
<       real*8 rba,rba2,rba3
<       real*8 rbc,rbc2,rbc3
<       real*8 ddqdx,ddqdy,ddqdz
<       real*8 frcxa1,frcya1,frcza1
<       real*8 frcxb1,frcyb1,frczb1
<       real*8 frcxc1,frcyc1,frczc1
<       real*8 frcxa2,frcya2,frcza2
<       real*8 frcxb2,frcyb2,frczb2
<       real*8 frcxc2,frcyc2,frczc2
<       real*8 pjbp1,pjbp2
<       real*8 pjtheta1,pjtheta2
<       real*8 dot
<       real*8 term2xa,term2ya,term2za
<       real*8 term2xc,term2yc,term2zc
<       integer ia,ib,ic
<       integer typea,typeb,typec
186d153
<       allocate (damppot(n))
207d173
<          damppot(i) = 0.0d0
218d183
<       if (use_cflux) call chrgflux
231d195
<          if (use_cflux) ci=ci+pchrgflux(i)
276d239
<                if (use_cflux) ck=ck+pchrgflux(k)
519,533d481
< c
< c     calculate the CP-damped potential at each mpole site 
< c
<                if (use_cflux) then
<                   term1i = nuck*scalei(1) + qk*scaleik(1) 
<                   term1k = nuci*scalek(1) + qi*scaleik(1) 
<                   term2i = -drk*scaleik(3)
<                   term2k = +dri*scaleik(3)
<                   term3i = qrrk*scaleik(5)
<                   term3k = qrri*scaleik(5)
<                   poti = term1i*rr1 + term2i*rr3 + term3i*rr5
<                   potk = term1k*rr1 + term2k*rr3 + term3k*rr5
<                   damppot(ii) = damppot(ii) + poti
<                   damppot(kk) = damppot(kk) + potk
<                end if 
642d589
<          if (use_cflux) ci=ci+pchrgflux(i)
690d636
<                if (use_cflux) ck=ck+pchrgflux(k)
934,948d879
< c     calculate the CP-damped potential at each mpole site 
< c
<                if (use_cflux) then
<                   term1i = nuck*scalei(1) + qk*scaleik(1) 
<                   term1k = nuci*scalek(1) + qi*scaleik(1) 
<                   term2i = -drk*scaleik(3)
<                   term2k = +dri*scaleik(3)
<                   term3i = qrrk*scaleik(5)
<                   term3k = qrri*scaleik(5)
<                   poti = term1i*rr1 + term2i*rr3 + term3i*rr5
<                   potk = term1k*rr1 + term2k*rr3 + term3k*rr5
<                   damppot(ii) = damppot(ii) + poti
<                   damppot(kk) = damppot(kk) + potk
<                end if 
< c
1043,1237d973
< c     Extra derivative terms due to charge flux
< c
<       if (use_cflux .and. dobond) then
< 
< !$OMP DO reduction(+:dem) schedule(guided)
<         do i = 1, nbond
<           ia = ibnd(1,i)
<           ib = ibnd(2,i)
<           !write(*,*)"DAMPPOT",ia,damppot(ia)
<           !write(*,*)"DAMPPOT",ib,damppot(ib)
<           if ((type(ia) .eq. 441 .and. 
<      &         type(ib) .eq. 442) .or. 
<      &       ((type(ia) .eq. 442) .and.
<      &        (type(ib) .eq. 441))) then 
<              pjb = jb(1)
<           else if ((type(ia) .eq. 1 .and. 
<      &              type(ib) .eq. 2) .or. 
<      &            ((type(ia) .eq. 2) .and.
<      &             (type(ib) .eq. 1))) then 
<              pjb = jb(2)
<           end if
<           xa = x(ia) 
<           ya = y(ia) 
<           za = z(ia)
<           xb = x(ib) 
<           yb = y(ib) 
<           zb = z(ib) 
<           xba = xa - xb 
<           yba = ya - yb 
<           zba = za - zb
<           rba2 = xba**2 + yba**2 + zba**2
<           rba = sqrt(rba2)
<           ddqdx = pjb*(xa-xb)/rba
<           ddqdy = pjb*(ya-yb)/rba
<           ddqdz = pjb*(za-zb)/rba
<           frcx = -(damppot(ia)-damppot(ib))*ddqdx
<           frcy = -(damppot(ia)-damppot(ib))*ddqdy
<           frcz = -(damppot(ia)-damppot(ib))*ddqdz
<           dem(1,ia) = dem(1,ia) + frcx
<           dem(2,ia) = dem(2,ia) + frcy
<           dem(3,ia) = dem(3,ia) + frcz
<           dem(1,ib) = dem(1,ib) - frcx
<           dem(2,ib) = dem(2,ib) - frcy
<           dem(3,ib) = dem(3,ib) - frcz
<         end do
< !OMP END DO
<       end if
< 
<       if (use_cflux .and. doangle) then
< !$OMP DO reduction(+:dem) schedule(guided)
<         do i = 1, nangle
<           ia = iang(1,i)
<           ib = iang(2,i)
<           ic = iang(3,i)
<           typea = type(ia)
<           typeb = type(ib)
<           typec = type(ic)
<           if ((typea .eq. 442) .and. 
<      &        (typeb .eq. 441) .and.
<      &        (typec .eq. 442)) then
<              pjbp1 = jbp1(1)
<              pjbp2 = jbp2(1)
<              pjtheta1 = jtheta1(1) 
<              pjtheta2 = jtheta2(1) 
<           else if ((typea .eq. 2) .and. 
<      &             (typeb .eq. 1) .and.
<      &             (typec .eq. 2)) then
<              pjbp1 = jbp1(2)
<              pjbp2 = jbp2(2)
<              pjtheta1 = jtheta1(2) 
<              pjtheta2 = jtheta2(2)
<           end if
<           xa = x(ia) 
<           ya = y(ia) 
<           za = z(ia)
<           xb = x(ib) 
<           yb = y(ib) 
<           zb = z(ib) 
<           xc = x(ic) 
<           yc = y(ic) 
<           zc = z(ic) 
<           xba = xa - xb 
<           yba = ya - yb 
<           zba = za - zb
<           xbc = xc - xb 
<           ybc = yc - yb 
<           zbc = zc - zb
< 
<           rba2 = xba**2 + yba**2 + zba**2
<           rba  = sqrt(rba2)
<           rba3 = rba2*rba
<           rbc2 = xbc**2 + ybc**2 + zbc**2
<           rbc  = sqrt(rbc2)
<           rbc3 = rbc2*rbc
< c
< c         terms due to bond stretching in angle
< c
< 
< c         for site a
<           frcxa1 = -(damppot(ib)-damppot(ic))*pjbp2*xba/rba
<           frcya1 = -(damppot(ib)-damppot(ic))*pjbp2*yba/rba
<           frcza1 = -(damppot(ib)-damppot(ic))*pjbp2*zba/rba
< c         for site c
<           frcxc1 = -(damppot(ib)-damppot(ia))*pjbp1*xbc/rbc
<           frcyc1 = -(damppot(ib)-damppot(ia))*pjbp1*ybc/rbc
<           frczc1 = -(damppot(ib)-damppot(ia))*pjbp1*zbc/rbc
< c         for site b
<           frcxb1 = -(frcxa1 + frcxc1) 
<           frcyb1 = -(frcya1 + frcyc1) 
<           frczb1 = -(frcza1 + frczc1) 
< 
<           dem(1,ia) = dem(1,ia) + frcxa1 
<           dem(2,ia) = dem(2,ia) + frcya1
<           dem(3,ia) = dem(3,ia) + frcza1
<           dem(1,ib) = dem(1,ib) + frcxb1
<           dem(2,ib) = dem(2,ib) + frcyb1
<           dem(3,ib) = dem(3,ib) + frczb1
<           dem(1,ic) = dem(1,ic) + frcxc1
<           dem(2,ic) = dem(2,ic) + frcyc1
<           dem(3,ic) = dem(3,ic) + frczc1
< c
< c         terms due to angle bending
< c
<           dot = xba*xbc + yba*ybc + zba*zbc
<           term1 = -rba*rbc/sqrt(rba2*rbc2-dot**2)
< 
<           term2xa = xbc/(rba*rbc) -xba*dot/(rba3*rbc)
<           term2xc = xba/(rba*rbc) -xbc*dot/(rba*rbc3)
< 
<           term2ya = ybc/(rba*rbc) -yba*dot/(rba3*rbc)
<           term2yc = yba/(rba*rbc) -ybc*dot/(rba*rbc3)
< 
<           term2za = zbc/(rba*rbc) -zba*dot/(rba3*rbc)
<           term2zc = zba/(rba*rbc) -zbc*dot/(rba*rbc3)
< 
<           frcxa2 = (damppot(ia)*pjtheta1
<      &             - damppot(ib)*(pjtheta1+pjtheta2)
<      &             + damppot(ic)*pjtheta2)*term1*term2xa*radian
<           frcya2 = (damppot(ia)*pjtheta1
<      &             - damppot(ib)*(pjtheta1+pjtheta2)
<      &             + damppot(ic)*pjtheta2)*term1*term2ya*radian
<           frcza2 = (damppot(ia)*pjtheta1
<      &             - damppot(ib)*(pjtheta1+pjtheta2)
<      &             + damppot(ic)*pjtheta2)*term1*term2za*radian
< 
<           frcxc2 = (damppot(ia)*pjtheta1
<      &             - damppot(ib)*(pjtheta1+pjtheta2)
<      &             + damppot(ic)*pjtheta2)*term1*term2xc*radian
<           frcyc2 = (damppot(ia)*pjtheta1
<      &             - damppot(ib)*(pjtheta1+pjtheta2)
<      &             + damppot(ic)*pjtheta2)*term1*term2yc*radian
<           frczc2 = (damppot(ia)*pjtheta1
<      &             - damppot(ib)*(pjtheta1+pjtheta2)
<      &             + damppot(ic)*pjtheta2)*term1*term2zc*radian
< c
< c         explict expression
< c
< 
< C          term2xb = -(xba+xbc)/(rba*rbc) +xba*dot/(rba3*rbc)
< C     &                                   +xbc*dot/(rba*rbc3)
< C          term2yb = -(yba+ybc)/(rba*rbc) +yba*dot/(rba3*rbc)
< C     &                                   +ybc*dot/(rba*rbc3)
< C          term2zb = -(zba+zbc)/(rba*rbc) +zba*dot/(rba3*rbc)
< C     &                                   +zbc*dot/(rba*rbc3)
< C
< C          frcxb2 = (damppot(ia)*pjtheta1
< C     &             - damppot(ib)*(pjtheta1+pjtheta2)
< C     &             + damppot(ic)*pjtheta2)*term1*term2xb*radian
< C          frcyb2 = (damppot(ia)*pjtheta1
< C     &             - damppot(ib)*(pjtheta1+pjtheta2)
< C     &             + damppot(ic)*pjtheta2)*term1*term2yb*radian
< C          frczb2 = (damppot(ia)*pjtheta1
< C     &             - damppot(ib)*(pjtheta1+pjtheta2)
< C     &             + damppot(ic)*pjtheta2)*term1*term2zb*radian
< 
< c
< c        A simpler way to calculate site b
< c
<           frcxb2 = - (frcxa2 + frcxc2)
<           frcyb2 = - (frcya2 + frcyc2)
<           frczb2 = - (frcza2 + frczc2)
< 
<           dem(1,ia) = dem(1,ia) + frcxa2 
<           dem(2,ia) = dem(2,ia) + frcya2
<           dem(3,ia) = dem(3,ia) + frcza2
<           dem(1,ib) = dem(1,ib) + frcxb2
<           dem(2,ib) = dem(2,ib) + frcyb2
<           dem(3,ib) = dem(3,ib) + frczb2
<           dem(1,ic) = dem(1,ic) + frcxc2
<           dem(2,ic) = dem(2,ic) + frcyc2
<           dem(3,ic) = dem(3,ic) + frczc2
<         end do
< !OMP END DO
<       end if
< c
1281d1016
<       deallocate (damppot)
1302,1303d1036
<       use angbnd
<       use bndstr
1305d1037
<       use cflux
1313d1044
<       use math
1318d1048
<       use potent
1334c1064
<       real*8 r,r2,rr1,rr3,rr3sc
---
>       real*8 r,r2,rr1,rr3
1379,1405d1108
< !     charge flux variables
<       real*8, allocatable :: damppot(:)
<       real*8 term1i,term2i,term3i
<       real*8 term1k,term2k,term3k
<       real*8 poti,potk
<       real*8 pjb
<       real*8 xa,ya,za
<       real*8 xb,yb,zb
<       real*8 xc,yc,zc
<       real*8 xba,yba,zba
<       real*8 xbc,ybc,zbc
<       real*8 rba,rba2,rba3
<       real*8 rbc,rbc2,rbc3
<       real*8 ddqdx,ddqdy,ddqdz
<       real*8 frcxa1,frcya1,frcza1
<       real*8 frcxb1,frcyb1,frczb1
<       real*8 frcxc1,frcyc1,frczc1
<       real*8 frcxa2,frcya2,frcza2
<       real*8 frcxb2,frcyb2,frczb2
<       real*8 frcxc2,frcyc2,frczc2
<       real*8 pjbp1,pjbp2
<       real*8 pjtheta1,pjtheta2
<       real*8 dot
<       real*8 term2xa,term2ya,term2za
<       real*8 term2xc,term2yc,term2zc
<       integer ia,ib,ic
<       integer typea,typeb,typec
1430d1132
<       allocate (damppot(n))
1437d1138
<          damppot(i) = 0.0d0
1462d1162
<       if (use_cflux) call chrgflux
1469,1470c1169
< !$OMP& atomic,penalpha,type,use_cflux,pchrgflux,jb,dobond,doangle,
< !$OMP& ibnd,nbond,nangle,iang,jbp1,jbp2,jtheta1,jtheta2,
---
> !$OMP& atomic,penalpha,type,
1472,1473c1171,1172
< !$OMP& firstprivate(mscale) shared(em,einter,dem,tem,vir,damppot)
< !$OMP DO reduction(+:em,einter,dem,tem,vir,damppot) schedule(guided)
---
> !$OMP& firstprivate(mscale) shared (em,einter,dem,tem,vir)
> !$OMP DO reduction(+:em,einter,dem,tem,vir) schedule(guided)
1486d1184
<          if (use_cflux) ci=ci+pchrgflux(i)
1532d1229
<                if (use_cflux) ck=ck+pchrgflux(k)
1776,1791d1472
< 
< c
< c     calculate the CP-damped potential at each mpole site 
< c
<                if (use_cflux) then
<                   term1i = nuck*scalei(1) + qk*scaleik(1) 
<                   term1k = nuci*scalek(1) + qi*scaleik(1) 
<                   term2i = -drk*scaleik(3)
<                   term2k = +dri*scaleik(3)
<                   term3i = qrrk*scaleik(5)
<                   term3k = qrri*scaleik(5)
<                   poti = term1i*rr1 + term2i*rr3 + term3i*rr5
<                   potk = term1k*rr1 + term2k*rr3 + term3k*rr5
<                   damppot(ii) = damppot(ii) + poti
<                   damppot(kk) = damppot(kk) + potk
<                end if 
1795c1476
<                rr3sc = rr3*scaleik(3)
---
>                rr3 = rr3*scaleik(3)
1797,1801c1478,1482
<                ttmi(1) =-rr3sc*dikx + term1*dirx + term3*(dqiqkx+dkqixr)
<      &                     - term4*qrixr - term6*(qikrxr+qrrx)
<                ttmi(2) =-rr3sc*diky + term1*diry + term3*(dqiqky+dkqiyr)
<      &                     - term4*qriyr - term6*(qikryr+qrry)
<                ttmi(3) =-rr3sc*dikz + term1*dirz + term3*(dqiqkz+dkqizr)
---
>                ttmi(1) = -rr3*dikx + term1*dirx + term3*(dqiqkx+dkqixr)
>      &                      - term4*qrixr - term6*(qikrxr+qrrx)
>                ttmi(2) = -rr3*diky + term1*diry + term3*(dqiqky+dkqiyr)
>      &                      - term4*qriyr - term6*(qikryr+qrry)
>                ttmi(3) = -rr3*dikz + term1*dirz + term3*(dqiqkz+dkqizr)
1803c1484
<                ttmk(1) = rr3sc*dikx + term2*dkrx - term3*(dqiqkx+diqkxr)
---
>                ttmk(1) = rr3*dikx + term2*dkrx - term3*(dqiqkx+diqkxr)
1805c1486
<                ttmk(2) = rr3sc*diky + term2*dkry - term3*(dqiqky+diqkyr)
---
>                ttmk(2) = rr3*diky + term2*dkry - term3*(dqiqky+diqkyr)
1807c1488
<                ttmk(3) = rr3sc*dikz + term2*dkrz - term3*(dqiqkz+diqkzr)
---
>                ttmk(3) = rr3*dikz + term2*dkrz - term3*(dqiqkz+diqkzr)
1880,2074d1560
< 
< c
< c     Extra derivative terms due to charge flux
< c
<       if (use_cflux .and. dobond) then
< 
< !$OMP DO reduction(+:dem) schedule(guided)
<         do i = 1, nbond
<           ia = ibnd(1,i)
<           ib = ibnd(2,i)
<           if ((type(ia) .eq. 441 .and. 
<      &         type(ib) .eq. 442) .or. 
<      &       ((type(ia) .eq. 442) .and.
<      &        (type(ib) .eq. 441))) then 
<              pjb = jb(1)
<           else if ((type(ia) .eq. 1 .and. 
<      &              type(ib) .eq. 2) .or. 
<      &            ((type(ia) .eq. 2) .and.
<      &             (type(ib) .eq. 1))) then 
<              pjb = jb(2)
<           end if
<           xa = x(ia) 
<           ya = y(ia) 
<           za = z(ia)
<           xb = x(ib) 
<           yb = y(ib) 
<           zb = z(ib) 
<           xba = xa - xb 
<           yba = ya - yb 
<           zba = za - zb
<           rba2 = xba**2 + yba**2 + zba**2
<           rba = sqrt(rba2)
<           ddqdx = pjb*(xa-xb)/rba
<           ddqdy = pjb*(ya-yb)/rba
<           ddqdz = pjb*(za-zb)/rba
<           frcx = -(damppot(ia)-damppot(ib))*ddqdx
<           frcy = -(damppot(ia)-damppot(ib))*ddqdy
<           frcz = -(damppot(ia)-damppot(ib))*ddqdz
<           dem(1,ia) = dem(1,ia) + frcx
<           dem(2,ia) = dem(2,ia) + frcy
<           dem(3,ia) = dem(3,ia) + frcz
<           dem(1,ib) = dem(1,ib) - frcx
<           dem(2,ib) = dem(2,ib) - frcy
<           dem(3,ib) = dem(3,ib) - frcz
<         end do
< !OMP END DO
<       end if
< 
<       if (use_cflux .and. doangle) then
< !$OMP DO reduction(+:dem) schedule(guided)
<         do i = 1, nangle
<           ia = iang(1,i)
<           ib = iang(2,i)
<           ic = iang(3,i)
<           typea = type(ia)
<           typeb = type(ib)
<           typec = type(ic)
<           if ((typea .eq. 442) .and. 
<      &        (typeb .eq. 441) .and.
<      &        (typec .eq. 442)) then
<              pjbp1 = jbp1(1)
<              pjbp2 = jbp2(1)
<              pjtheta1 = jtheta1(1) 
<              pjtheta2 = jtheta2(1) 
<           else if ((typea .eq. 2) .and. 
<      &             (typeb .eq. 1) .and.
<      &             (typec .eq. 2)) then
<              pjbp1 = jbp1(2)
<              pjbp2 = jbp2(2)
<              pjtheta1 = jtheta1(2) 
<              pjtheta2 = jtheta2(2)
<           end if
<           xa = x(ia) 
<           ya = y(ia) 
<           za = z(ia)
<           xb = x(ib) 
<           yb = y(ib) 
<           zb = z(ib) 
<           xc = x(ic) 
<           yc = y(ic) 
<           zc = z(ic) 
<           xba = xa - xb 
<           yba = ya - yb 
<           zba = za - zb
<           xbc = xc - xb 
<           ybc = yc - yb 
<           zbc = zc - zb
< 
<           rba2 = xba**2 + yba**2 + zba**2
<           rba  = sqrt(rba2)
<           rba3 = rba2*rba
<           rbc2 = xbc**2 + ybc**2 + zbc**2
<           rbc  = sqrt(rbc2)
<           rbc3 = rbc2*rbc
< c
< c         terms due to bond stretching in angle
< c
< 
< c         for site a
<           frcxa1 = -(damppot(ib)-damppot(ic))*pjbp2*xba/rba
<           frcya1 = -(damppot(ib)-damppot(ic))*pjbp2*yba/rba
<           frcza1 = -(damppot(ib)-damppot(ic))*pjbp2*zba/rba
< c         for site c
<           frcxc1 = -(damppot(ib)-damppot(ia))*pjbp1*xbc/rbc
<           frcyc1 = -(damppot(ib)-damppot(ia))*pjbp1*ybc/rbc
<           frczc1 = -(damppot(ib)-damppot(ia))*pjbp1*zbc/rbc
< c         for site b
<           frcxb1 = -(frcxa1 + frcxc1) 
<           frcyb1 = -(frcya1 + frcyc1) 
<           frczb1 = -(frcza1 + frczc1) 
< 
<           dem(1,ia) = dem(1,ia) + frcxa1 
<           dem(2,ia) = dem(2,ia) + frcya1
<           dem(3,ia) = dem(3,ia) + frcza1
<           dem(1,ib) = dem(1,ib) + frcxb1
<           dem(2,ib) = dem(2,ib) + frcyb1
<           dem(3,ib) = dem(3,ib) + frczb1
<           dem(1,ic) = dem(1,ic) + frcxc1
<           dem(2,ic) = dem(2,ic) + frcyc1
<           dem(3,ic) = dem(3,ic) + frczc1
< c
< c         terms due to angle bending
< c
<           dot = xba*xbc + yba*ybc + zba*zbc
<           term1 = -rba*rbc/sqrt(rba2*rbc2-dot**2)
< 
<           term2xa = xbc/(rba*rbc) -xba*dot/(rba3*rbc)
<           term2xc = xba/(rba*rbc) -xbc*dot/(rba*rbc3)
< 
<           term2ya = ybc/(rba*rbc) -yba*dot/(rba3*rbc)
<           term2yc = yba/(rba*rbc) -ybc*dot/(rba*rbc3)
< 
<           term2za = zbc/(rba*rbc) -zba*dot/(rba3*rbc)
<           term2zc = zba/(rba*rbc) -zbc*dot/(rba*rbc3)
< 
<           frcxa2 = (damppot(ia)*pjtheta1
<      &             - damppot(ib)*(pjtheta1+pjtheta2)
<      &             + damppot(ic)*pjtheta2)*term1*term2xa*radian
<           frcya2 = (damppot(ia)*pjtheta1
<      &             - damppot(ib)*(pjtheta1+pjtheta2)
<      &             + damppot(ic)*pjtheta2)*term1*term2ya*radian
<           frcza2 = (damppot(ia)*pjtheta1
<      &             - damppot(ib)*(pjtheta1+pjtheta2)
<      &             + damppot(ic)*pjtheta2)*term1*term2za*radian
< 
<           frcxc2 = (damppot(ia)*pjtheta1
<      &             - damppot(ib)*(pjtheta1+pjtheta2)
<      &             + damppot(ic)*pjtheta2)*term1*term2xc*radian
<           frcyc2 = (damppot(ia)*pjtheta1
<      &             - damppot(ib)*(pjtheta1+pjtheta2)
<      &             + damppot(ic)*pjtheta2)*term1*term2yc*radian
<           frczc2 = (damppot(ia)*pjtheta1
<      &             - damppot(ib)*(pjtheta1+pjtheta2)
<      &             + damppot(ic)*pjtheta2)*term1*term2zc*radian
< c
< c         explict expression
< c
< 
< C          term2xb = -(xba+xbc)/(rba*rbc) +xba*dot/(rba3*rbc)
< C     &                                   +xbc*dot/(rba*rbc3)
< C          term2yb = -(yba+ybc)/(rba*rbc) +yba*dot/(rba3*rbc)
< C     &                                   +ybc*dot/(rba*rbc3)
< C          term2zb = -(zba+zbc)/(rba*rbc) +zba*dot/(rba3*rbc)
< C     &                                   +zbc*dot/(rba*rbc3)
< C
< C          frcxb2 = (damppot(ia)*pjtheta1
< C     &             - damppot(ib)*(pjtheta1+pjtheta2)
< C     &             + damppot(ic)*pjtheta2)*term1*term2xb*radian
< C          frcyb2 = (damppot(ia)*pjtheta1
< C     &             - damppot(ib)*(pjtheta1+pjtheta2)
< C     &             + damppot(ic)*pjtheta2)*term1*term2yb*radian
< C          frczb2 = (damppot(ia)*pjtheta1
< C     &             - damppot(ib)*(pjtheta1+pjtheta2)
< C     &             + damppot(ic)*pjtheta2)*term1*term2zb*radian
< 
< c
< c        A simpler way to calculate site b
< c
<           frcxb2 = - (frcxa2 + frcxc2)
<           frcyb2 = - (frcya2 + frcyc2)
<           frczb2 = - (frcza2 + frczc2)
< 
<           dem(1,ia) = dem(1,ia) + frcxa2 
<           dem(2,ia) = dem(2,ia) + frcya2
<           dem(3,ia) = dem(3,ia) + frcza2
<           dem(1,ib) = dem(1,ib) + frcxb2
<           dem(2,ib) = dem(2,ib) + frcyb2
<           dem(3,ib) = dem(3,ib) + frczb2
<           dem(1,ic) = dem(1,ic) + frcxc2
<           dem(2,ic) = dem(2,ic) + frcyc2
<           dem(3,ic) = dem(3,ic) + frczc2
<         end do
< !OMP END DO
<       end if
< 
2122d1607
< c
2126d1610
<       deallocate (damppot)
2148d1631
<       use cflux
2155d1637
<       use potent
2195,2198d1676
< c     
< c     charge flux
< c  
< !      if (use_cflux) call chrgflux
2203c1681
< !      write(*,*) "after emreal1c", dem(1,1)
---
>       write(*,*) "after emreal1c", dem(1,1)
2208c1686
< !      write(*,*) "after emrecip1", dem(1,1)
---
>       write(*,*) "after emrecip1", dem(1,1)
2216d1693
<          !if (use_cflux) ci=ci+pchrgflux(i)
2316,2317d1792
<       use angbnd
<       use bndstr 
2320d1794
<       use cflux
2332d1805
<       use potent
2348c1821
<       real*8 r,r2,rr1,rr3,rr3sc
---
>       real*8 r,r2,rr1,rr3
2393,2419d1865
<       real*8, allocatable :: damppot(:)
<       real*8 term1i,term2i,term3i
<       real*8 term1k,term2k,term3k
<       real*8 poti,potk
<       real*8 pjb
<       real*8 xa,ya,za
<       real*8 xb,yb,zb
<       real*8 xc,yc,zc
<       real*8 xba,yba,zba
<       real*8 xbc,ybc,zbc
<       real*8 rba,rba2,rba3
<       real*8 rbc,rbc2,rbc3
<       real*8 ddqdx,ddqdy,ddqdz
<       real*8 frcxcf,frcycf,frczcf
<       real*8 frcxa1,frcya1,frcza1
<       real*8 frcxb1,frcyb1,frczb1
<       real*8 frcxc1,frcyc1,frczc1
<       real*8 frcxa2,frcya2,frcza2
<       real*8 frcxb2,frcyb2,frczb2
<       real*8 frcxc2,frcyc2,frczc2
<       real*8 pjbp1,pjbp2
<       real*8 pjtheta1,pjtheta2
<       real*8 dot
<       real*8 term2xa,term2ya,term2za
<       real*8 term2xc,term2yc,term2zc
<       integer ia,ib,ic
<       integer typea,typeb,typec
2427d1872
<       allocate (damppot(n))
2448d1892
<          damppot(i) = 0.0d0
2459,2460d1902
<       !write(*,*) "USE_CFLUX",use_cflux
< !      if (use_cflux) call chrgflux
2470,2471d1911
<          !write(*,*) "USE_CFLUX",use_cflux
< !         if (use_cflux) ci=ci+pchrgflux(i)
2506,2507d1945
<                !write(*,*) "USE_CFLUX",use_cflux
<                !if (use_cflux) ck=ck+pchrgflux(k)
2712d2149
< 
2719d2155
< 
2813,2830d2248
< c     calculate the damped potential at each mpole site 
< c
<                !write(*,*) "USE_CFLUX",use_cflux
< !               if (use_cflux) then
< !                  term1i = nuck*(bn(0)-(1.0d0-scalei(1)*mscale(kk))) 
< !     &                    + qk*(bn(0)-(1.0d0-scaleik(1)*mscale(kk)))
< !                  term1k = nuci*(bn(0)-(1.0d0-scalek(1)*mscale(kk))) 
< !     &                    + qi*(bn(0)-(1.0d0-scaleik(1)*mscale(kk)))
< !                  term2i = -drk*(bn(1)-(1.0d0-scaleik(3)*mscale(kk)))
< !                  term2k = +dri*(bn(1)-(1.0d0-scaleik(3)*mscale(kk)))
< !                  term3i = qrrk*(bn(2)-(1.0d0-scaleik(5)*mscale(kk)))
< !                  term3k = qrri*(bn(2)-(1.0d0-scaleik(5)*mscale(kk)))
< !                  poti = term1i*rr1 + term2i*rr3 + term3i*rr5
< !                  potk = term1k*rr1 + term2k*rr3 + term3k*rr5
< !                  damppot(ii) = damppot(ii) + poti
< !                  damppot(kk) = damppot(kk) + potk
< !               end if 
< c
2833c2251
<                rr3sc =rr3*(bn(1)-(1.0d0-scaleik(3)*mscale(kk)))
---
>                rr3 =rr3*(bn(1)-(1.0d0-scaleik(3)*mscale(kk)))
2902,3099d2319
< c     Extra derivative terms due to charge flux
< c
<       !write(*,*) "USE_CFLUX",use_cflux
<       if (use_cflux .and. dobond) then
< 
< !$OMP DO reduction(+:dem) schedule(guided)
<         do i = 1, nbond
<           ia = ibnd(1,i)
<           ib = ibnd(2,i)
<           !write(*,*)"DAMPPOT",ia,damppot(ia)
<           !write(*,*)"DAMPPOT",ib,damppot(ib)
<           if ((type(ia) .eq. 441 .and. 
<      &         type(ib) .eq. 442) .or. 
<      &       ((type(ia) .eq. 442) .and.
<      &        (type(ib) .eq. 441))) then 
<              pjb = jb(1)
<           else if ((type(ia) .eq. 1 .and. 
<      &              type(ib) .eq. 2) .or. 
<      &            ((type(ia) .eq. 2) .and.
<      &             (type(ib) .eq. 1))) then 
<              pjb = jb(2)
<           end if
<           xa = x(ia) 
<           ya = y(ia) 
<           za = z(ia)
<           xb = x(ib) 
<           yb = y(ib) 
<           zb = z(ib) 
<           xba = xa - xb 
<           yba = ya - yb 
<           zba = za - zb
<           rba2 = xba**2 + yba**2 + zba**2
<           rba = sqrt(rba2)
<           ddqdx = pjb*(xa-xb)/rba
<           ddqdy = pjb*(ya-yb)/rba
<           ddqdz = pjb*(za-zb)/rba
<           frcxcf = -(damppot(ia)-damppot(ib))*ddqdx
<           frcycf = -(damppot(ia)-damppot(ib))*ddqdy
<           frczcf = -(damppot(ia)-damppot(ib))*ddqdz
<           dem(1,ia) = dem(1,ia) + frcxcf
<           dem(2,ia) = dem(2,ia) + frcycf
<           dem(3,ia) = dem(3,ia) + frczcf
<           dem(1,ib) = dem(1,ib) - frcxcf
<           dem(2,ib) = dem(2,ib) - frcycf
<           dem(3,ib) = dem(3,ib) - frczcf
<         end do
< !OMP END DO
<       end if
< 
<       !write(*,*) "USE_CFLUX",use_cflux
<       if (use_cflux .and. doangle) then
< !$OMP DO reduction(+:dem) schedule(guided)
<         do i = 1, nangle
<           ia = iang(1,i)
<           ib = iang(2,i)
<           ic = iang(3,i)
<           typea = type(ia)
<           typeb = type(ib)
<           typec = type(ic)
<           if ((typea .eq. 442) .and. 
<      &        (typeb .eq. 441) .and.
<      &        (typec .eq. 442)) then
<              pjbp1 = jbp1(1)
<              pjbp2 = jbp2(1)
<              pjtheta1 = jtheta1(1) 
<              pjtheta2 = jtheta2(1) 
<           else if ((typea .eq. 2) .and. 
<      &             (typeb .eq. 1) .and.
<      &             (typec .eq. 2)) then
<              pjbp1 = jbp1(2)
<              pjbp2 = jbp2(2)
<              pjtheta1 = jtheta1(2) 
<              pjtheta2 = jtheta2(2)
<           end if
<           xa = x(ia) 
<           ya = y(ia) 
<           za = z(ia)
<           xb = x(ib) 
<           yb = y(ib) 
<           zb = z(ib) 
<           xc = x(ic) 
<           yc = y(ic) 
<           zc = z(ic) 
<           xba = xa - xb 
<           yba = ya - yb 
<           zba = za - zb
<           xbc = xc - xb 
<           ybc = yc - yb 
<           zbc = zc - zb
< 
<           rba2 = xba**2 + yba**2 + zba**2
<           rba  = sqrt(rba2)
<           rba3 = rba2*rba
<           rbc2 = xbc**2 + ybc**2 + zbc**2
<           rbc  = sqrt(rbc2)
<           rbc3 = rbc2*rbc
< c
< c         terms due to bond stretching in angle
< c
< 
< c         for site a
<           frcxa1 = -(damppot(ib)-damppot(ic))*pjbp2*xba/rba
<           frcya1 = -(damppot(ib)-damppot(ic))*pjbp2*yba/rba
<           frcza1 = -(damppot(ib)-damppot(ic))*pjbp2*zba/rba
< c         for site c
<           frcxc1 = -(damppot(ib)-damppot(ia))*pjbp1*xbc/rbc
<           frcyc1 = -(damppot(ib)-damppot(ia))*pjbp1*ybc/rbc
<           frczc1 = -(damppot(ib)-damppot(ia))*pjbp1*zbc/rbc
< c         for site b
<           frcxb1 = -(frcxa1 + frcxc1) 
<           frcyb1 = -(frcya1 + frcyc1) 
<           frczb1 = -(frcza1 + frczc1) 
< 
<           dem(1,ia) = dem(1,ia) + frcxa1 
<           dem(2,ia) = dem(2,ia) + frcya1
<           dem(3,ia) = dem(3,ia) + frcza1
<           dem(1,ib) = dem(1,ib) + frcxb1
<           dem(2,ib) = dem(2,ib) + frcyb1
<           dem(3,ib) = dem(3,ib) + frczb1
<           dem(1,ic) = dem(1,ic) + frcxc1
<           dem(2,ic) = dem(2,ic) + frcyc1
<           dem(3,ic) = dem(3,ic) + frczc1
< c
< c         terms due to angle bending
< c
<           dot = xba*xbc + yba*ybc + zba*zbc
<           term1 = -rba*rbc/sqrt(rba2*rbc2-dot**2)
< 
<           term2xa = xbc/(rba*rbc) -xba*dot/(rba3*rbc)
<           term2xc = xba/(rba*rbc) -xbc*dot/(rba*rbc3)
< 
<           term2ya = ybc/(rba*rbc) -yba*dot/(rba3*rbc)
<           term2yc = yba/(rba*rbc) -ybc*dot/(rba*rbc3)
< 
<           term2za = zbc/(rba*rbc) -zba*dot/(rba3*rbc)
<           term2zc = zba/(rba*rbc) -zbc*dot/(rba*rbc3)
< 
<           frcxa2 = (damppot(ia)*pjtheta1
<      &             - damppot(ib)*(pjtheta1+pjtheta2)
<      &             + damppot(ic)*pjtheta2)*term1*term2xa*radian
<           frcya2 = (damppot(ia)*pjtheta1
<      &             - damppot(ib)*(pjtheta1+pjtheta2)
<      &             + damppot(ic)*pjtheta2)*term1*term2ya*radian
<           frcza2 = (damppot(ia)*pjtheta1
<      &             - damppot(ib)*(pjtheta1+pjtheta2)
<      &             + damppot(ic)*pjtheta2)*term1*term2za*radian
< 
<           frcxc2 = (damppot(ia)*pjtheta1
<      &             - damppot(ib)*(pjtheta1+pjtheta2)
<      &             + damppot(ic)*pjtheta2)*term1*term2xc*radian
<           frcyc2 = (damppot(ia)*pjtheta1
<      &             - damppot(ib)*(pjtheta1+pjtheta2)
<      &             + damppot(ic)*pjtheta2)*term1*term2yc*radian
<           frczc2 = (damppot(ia)*pjtheta1
<      &             - damppot(ib)*(pjtheta1+pjtheta2)
<      &             + damppot(ic)*pjtheta2)*term1*term2zc*radian
< c
< c         explict expression
< c
< 
< C          term2xb = -(xba+xbc)/(rba*rbc) +xba*dot/(rba3*rbc)
< C     &                                   +xbc*dot/(rba*rbc3)
< C          term2yb = -(yba+ybc)/(rba*rbc) +yba*dot/(rba3*rbc)
< C     &                                   +ybc*dot/(rba*rbc3)
< C          term2zb = -(zba+zbc)/(rba*rbc) +zba*dot/(rba3*rbc)
< C     &                                   +zbc*dot/(rba*rbc3)
< C
< C          frcxb2 = (damppot(ia)*pjtheta1
< C     &             - damppot(ib)*(pjtheta1+pjtheta2)
< C     &             + damppot(ic)*pjtheta2)*term1*term2xb*radian
< C          frcyb2 = (damppot(ia)*pjtheta1
< C     &             - damppot(ib)*(pjtheta1+pjtheta2)
< C     &             + damppot(ic)*pjtheta2)*term1*term2yb*radian
< C          frczb2 = (damppot(ia)*pjtheta1
< C     &             - damppot(ib)*(pjtheta1+pjtheta2)
< C     &             + damppot(ic)*pjtheta2)*term1*term2zb*radian
< 
< c
< c        A simpler way to calculate site b
< c
<           frcxb2 = - (frcxa2 + frcxc2)
<           frcyb2 = - (frcya2 + frcyc2)
<           frczb2 = - (frcza2 + frczc2)
< 
<           dem(1,ia) = dem(1,ia) + frcxa2 
<           dem(2,ia) = dem(2,ia) + frcya2
<           dem(3,ia) = dem(3,ia) + frcza2
<           dem(1,ib) = dem(1,ib) + frcxb2
<           dem(2,ib) = dem(2,ib) + frcyb2
<           dem(3,ib) = dem(3,ib) + frczb2
<           dem(1,ic) = dem(1,ic) + frcxc2
<           dem(2,ic) = dem(2,ic) + frcyc2
<           dem(3,ic) = dem(3,ic) + frczc2
<         end do
< !OMP END DO
<       end if
< 
< c
3113d2332
<          if (use_cflux) ci=ci+pchrgflux(i)
3152d2370
<                if (use_cflux) ck=ck+pchrgflux(k)
3457,3475d2674
< c     calculate the damped potential at each mpole site 
< c
<                if (use_cflux) then
<                   term1i = nuck*(bn(0)-(1.0d0-scalei(1)*mscale(kk))) 
<      &                    + qk*(bn(0)-(1.0d0-scaleik(1)*mscale(kk)))
<                   term1k = nuci*(bn(0)-(1.0d0-scalek(1)*mscale(kk))) 
<      &                    + qi*(bn(0)-(1.0d0-scaleik(1)*mscale(kk)))
<                   term2i = -drk*(bn(1)-(1.0d0-scaleik(3)*mscale(kk)))
<                   term2k = +dri*(bn(1)-(1.0d0-scaleik(3)*mscale(kk)))
<                   term3i = qrrk*scaleik(5)
<                   term3k = qrri*scaleik(5)
<                   term3i = qrrk*(bn(2)-(1.0d0-scaleik(5)*mscale(kk)))
<                   term3k = qrri*(bn(2)-(1.0d0-scaleik(5)*mscale(kk)))
<                   poti = term1i*rr1 + term2i*rr3 + term3i*rr5
<                   potk = term1k*rr1 + term2k*rr3 + term3k*rr5
<                   damppot(ii) = damppot(ii) + poti
<                   damppot(kk) = damppot(kk) + potk
<                end if 
< c
3560,3752d2758
< c     Extra derivative terms due to charge flux
< c
<       if (use_cflux .and. dobond) then
< 
< !$OMP DO reduction(+:dem) schedule(guided)
<         do i = 1, nbond
<           ia = ibnd(1,i)
<           ib = ibnd(2,i)
<           if ((type(ia) .eq. 441 .and. 
<      &         type(ib) .eq. 442) .or. 
<      &       ((type(ia) .eq. 442) .and.
<      &        (type(ib) .eq. 441))) then 
<              pjb = jb(1)
<           else if ((type(ia) .eq. 1 .and. 
<      &              type(ib) .eq. 2) .or. 
<      &            ((type(ia) .eq. 2) .and.
<      &             (type(ib) .eq. 1))) then 
<              pjb = jb(2)
<           end if
<           xa = x(ia) 
<           ya = y(ia) 
<           za = z(ia)
<           xb = x(ib) 
<           yb = y(ib) 
<           zb = z(ib) 
<           xba = xa - xb 
<           yba = ya - yb 
<           zba = za - zb
<           rba2 = xba**2 + yba**2 + zba**2
<           rba = sqrt(rba2)
<           ddqdx = pjb*(xa-xb)/rba
<           ddqdy = pjb*(ya-yb)/rba
<           ddqdz = pjb*(za-zb)/rba
<           frcxcf = -(damppot(ia)-damppot(ib))*ddqdx
<           frcycf = -(damppot(ia)-damppot(ib))*ddqdy
<           frczcf = -(damppot(ia)-damppot(ib))*ddqdz
<           dem(1,ia) = dem(1,ia) + frcxcf 
<           dem(2,ia) = dem(2,ia) + frcycf
<           dem(3,ia) = dem(3,ia) + frczcf
<           dem(1,ib) = dem(1,ib) - frcxcf
<           dem(2,ib) = dem(2,ib) - frcycf
<           dem(3,ib) = dem(3,ib) - frczcf
<         end do
< !OMP END DO
<       end if
< 
<       if (use_cflux .and. doangle) then
< !$OMP DO reduction(+:dem) schedule(guided)
<         do i = 1, nangle
<           ia = iang(1,i)
<           ib = iang(2,i)
<           ic = iang(3,i)
<           typea = type(ia)
<           typeb = type(ib)
<           typec = type(ic)
<           if ((typea .eq. 442) .and. 
<      &        (typeb .eq. 441) .and.
<      &        (typec .eq. 442)) then
<              pjbp1 = jbp1(1)
<              pjbp2 = jbp2(1)
<              pjtheta1 = jtheta1(1) 
<              pjtheta2 = jtheta2(1) 
<           else if ((typea .eq. 2) .and. 
<      &             (typeb .eq. 1) .and.
<      &             (typec .eq. 2)) then
<              pjbp1 = jbp1(2)
<              pjbp2 = jbp2(2)
<              pjtheta1 = jtheta1(2) 
<              pjtheta2 = jtheta2(2)
<           end if
<           xa = x(ia) 
<           ya = y(ia) 
<           za = z(ia)
<           xb = x(ib) 
<           yb = y(ib) 
<           zb = z(ib) 
<           xc = x(ic) 
<           yc = y(ic) 
<           zc = z(ic) 
<           xba = xa - xb 
<           yba = ya - yb 
<           zba = za - zb
<           xbc = xc - xb 
<           ybc = yc - yb 
<           zbc = zc - zb
< 
<           rba2 = xba**2 + yba**2 + zba**2
<           rba  = sqrt(rba2)
<           rba3 = rba2*rba
<           rbc2 = xbc**2 + ybc**2 + zbc**2
<           rbc  = sqrt(rbc2)
<           rbc3 = rbc2*rbc
< c
< c         terms due to bond stretching in angle
< c
< 
< c         for site a
<           frcxa1 = -(damppot(ib)-damppot(ic))*pjbp2*xba/rba
<           frcya1 = -(damppot(ib)-damppot(ic))*pjbp2*yba/rba
<           frcza1 = -(damppot(ib)-damppot(ic))*pjbp2*zba/rba
< c         for site c
<           frcxc1 = -(damppot(ib)-damppot(ia))*pjbp1*xbc/rbc
<           frcyc1 = -(damppot(ib)-damppot(ia))*pjbp1*ybc/rbc
<           frczc1 = -(damppot(ib)-damppot(ia))*pjbp1*zbc/rbc
< c         for site b
<           frcxb1 = -(frcxa1 + frcxc1) 
<           frcyb1 = -(frcya1 + frcyc1) 
<           frczb1 = -(frcza1 + frczc1) 
< 
<           dem(1,ia) = dem(1,ia) + frcxa1 
<           dem(2,ia) = dem(2,ia) + frcya1
<           dem(3,ia) = dem(3,ia) + frcza1
<           dem(1,ib) = dem(1,ib) + frcxb1
<           dem(2,ib) = dem(2,ib) + frcyb1
<           dem(3,ib) = dem(3,ib) + frczb1
<           dem(1,ic) = dem(1,ic) + frcxc1
<           dem(2,ic) = dem(2,ic) + frcyc1
<           dem(3,ic) = dem(3,ic) + frczc1
< c
< c         terms due to angle bending
< c
<           dot = xba*xbc + yba*ybc + zba*zbc
<           term1 = -rba*rbc/sqrt(rba2*rbc2-dot**2)
< 
<           term2xa = xbc/(rba*rbc) -xba*dot/(rba3*rbc)
<           term2xc = xba/(rba*rbc) -xbc*dot/(rba*rbc3)
< 
<           term2ya = ybc/(rba*rbc) -yba*dot/(rba3*rbc)
<           term2yc = yba/(rba*rbc) -ybc*dot/(rba*rbc3)
< 
<           term2za = zbc/(rba*rbc) -zba*dot/(rba3*rbc)
<           term2zc = zba/(rba*rbc) -zbc*dot/(rba*rbc3)
< 
<           frcxa2 = (damppot(ia)*pjtheta1
<      &             - damppot(ib)*(pjtheta1+pjtheta2)
<      &             + damppot(ic)*pjtheta2)*term1*term2xa*radian
<           frcya2 = (damppot(ia)*pjtheta1
<      &             - damppot(ib)*(pjtheta1+pjtheta2)
<      &             + damppot(ic)*pjtheta2)*term1*term2ya*radian
<           frcza2 = (damppot(ia)*pjtheta1
<      &             - damppot(ib)*(pjtheta1+pjtheta2)
<      &             + damppot(ic)*pjtheta2)*term1*term2za*radian
< 
<           frcxc2 = (damppot(ia)*pjtheta1
<      &             - damppot(ib)*(pjtheta1+pjtheta2)
<      &             + damppot(ic)*pjtheta2)*term1*term2xc*radian
<           frcyc2 = (damppot(ia)*pjtheta1
<      &             - damppot(ib)*(pjtheta1+pjtheta2)
<      &             + damppot(ic)*pjtheta2)*term1*term2yc*radian
<           frczc2 = (damppot(ia)*pjtheta1
<      &             - damppot(ib)*(pjtheta1+pjtheta2)
<      &             + damppot(ic)*pjtheta2)*term1*term2zc*radian
< c
< c         explict expression
< c
< 
< C          term2xb = -(xba+xbc)/(rba*rbc) +xba*dot/(rba3*rbc)
< C     &                                   +xbc*dot/(rba*rbc3)
< C          term2yb = -(yba+ybc)/(rba*rbc) +yba*dot/(rba3*rbc)
< C     &                                   +ybc*dot/(rba*rbc3)
< C          term2zb = -(zba+zbc)/(rba*rbc) +zba*dot/(rba3*rbc)
< C     &                                   +zbc*dot/(rba*rbc3)
< C
< C          frcxb2 = (damppot(ia)*pjtheta1
< C     &             - damppot(ib)*(pjtheta1+pjtheta2)
< C     &             + damppot(ic)*pjtheta2)*term1*term2xb*radian
< C          frcyb2 = (damppot(ia)*pjtheta1
< C     &             - damppot(ib)*(pjtheta1+pjtheta2)
< C     &             + damppot(ic)*pjtheta2)*term1*term2yb*radian
< C          frczb2 = (damppot(ia)*pjtheta1
< C     &             - damppot(ib)*(pjtheta1+pjtheta2)
< C     &             + damppot(ic)*pjtheta2)*term1*term2zb*radian
< 
< c
< c        A simpler way to calculate site b
< c
<           frcxb2 = - (frcxa2 + frcxc2)
<           frcyb2 = - (frcya2 + frcyc2)
<           frczb2 = - (frcza2 + frczc2)
< 
<           dem(1,ia) = dem(1,ia) + frcxa2 
<           dem(2,ia) = dem(2,ia) + frcya2
<           dem(3,ia) = dem(3,ia) + frcza2
<           dem(1,ib) = dem(1,ib) + frcxb2
<           dem(2,ib) = dem(2,ib) + frcyb2
<           dem(3,ib) = dem(3,ib) + frczb2
<           dem(1,ic) = dem(1,ic) + frcxc2
<           dem(2,ic) = dem(2,ic) + frcyc2
<           dem(3,ic) = dem(3,ic) + frczc2
<         end do
< !OMP END DO
<       end if
< c
3796d2801
<       deallocate (damppot)
4599,4600d3603
<       use angbnd
<       use bndstr
4604d3606
<       use cflux
4612d3613
<       use potent
4640,4663d3640
< !     charge flux variables
<       real*8 pjb,term1
<       real*8 frcx,frcy,frcz
<       real*8 xa,ya,za
<       real*8 xb,yb,zb
<       real*8 xc,yc,zc
<       real*8 xba,yba,zba
<       real*8 xbc,ybc,zbc
<       real*8 rba,rba2,rba3
<       real*8 rbc,rbc2,rbc3
<       real*8 ddqdx,ddqdy,ddqdz
<       real*8 frcxa1,frcya1,frcza1
<       real*8 frcxb1,frcyb1,frczb1
<       real*8 frcxc1,frcyc1,frczc1
<       real*8 frcxa2,frcya2,frcza2
<       real*8 frcxb2,frcyb2,frczb2
<       real*8 frcxc2,frcyc2,frczc2
<       real*8 pjbp1,pjbp2
<       real*8 pjtheta1,pjtheta2
<       real*8 dot
<       real*8 term2xa,term2ya,term2za
<       real*8 term2xc,term2yc,term2zc
<       integer ia,ib,ic
<       integer typea,typeb,typec
4707d3683
<          if (use_cflux) cmp(1,i)=cmp(1,i)+pchrgflux(i)
4854,5049d3829
< c     Extra derivative terms due to charge flux
< c
<       if (use_cflux .and. dobond) then
< 
< !$OMP DO reduction(+:dem) schedule(guided)
<         do i = 1, nbond
<           ia = ibnd(1,i)
<           ib = ibnd(2,i)
<           if ((type(ia) .eq. 441 .and. 
<      &         type(ib) .eq. 442) .or. 
<      &       ((type(ia) .eq. 442) .and.
<      &        (type(ib) .eq. 441))) then 
<              pjb = jb(1)
<           else if ((type(ia) .eq. 1 .and. 
<      &              type(ib) .eq. 2) .or. 
<      &            ((type(ia) .eq. 2) .and.
<      &             (type(ib) .eq. 1))) then 
<              pjb = jb(2)
<           end if
<           xa = x(ia) 
<           ya = y(ia) 
<           za = z(ia)
<           xb = x(ib) 
<           yb = y(ib) 
<           zb = z(ib) 
<           xba = xa - xb 
<           yba = ya - yb 
<           zba = za - zb
<           rba2 = xba**2 + yba**2 + zba**2
<           rba = sqrt(rba2)
<           ddqdx = pjb*(xa-xb)/rba
<           ddqdy = pjb*(ya-yb)/rba
<           ddqdz = pjb*(za-zb)/rba
<           !frcx = -(fphi(1,ia)-fphi(1,ib))*ddqdx
<           !frcy = -(fphi(1,ia)-fphi(1,ib))*ddqdy
<           !frcz = -(fphi(1,ia)-fphi(1,ib))*ddqdz
<           frcx = -(cphi(1,ia)-cphi(1,ib))*ddqdx
<           frcy = -(cphi(1,ia)-cphi(1,ib))*ddqdy
<           frcz = -(cphi(1,ia)-cphi(1,ib))*ddqdz
<           dem(1,ia) = dem(1,ia) + frcx
<           dem(2,ia) = dem(2,ia) + frcy
<           dem(3,ia) = dem(3,ia) + frcz
<           dem(1,ib) = dem(1,ib) - frcx
<           dem(2,ib) = dem(2,ib) - frcy
<           dem(3,ib) = dem(3,ib) - frcz
<         end do
< !OMP END DO
<       end if
< 
<       if (use_cflux .and. doangle) then
< !$OMP DO reduction(+:dem) schedule(guided)
<         do i = 1, nangle
<           ia = iang(1,i)
<           ib = iang(2,i)
<           ic = iang(3,i)
<           typea = type(ia)
<           typeb = type(ib)
<           typec = type(ic)
<           if ((typea .eq. 442) .and. 
<      &        (typeb .eq. 441) .and.
<      &        (typec .eq. 442)) then
<              pjbp1 = jbp1(1)
<              pjbp2 = jbp2(1)
<              pjtheta1 = jtheta1(1) 
<              pjtheta2 = jtheta2(1) 
<           else if ((typea .eq. 2) .and. 
<      &             (typeb .eq. 1) .and.
<      &             (typec .eq. 2)) then
<              pjbp1 = jbp1(2)
<              pjbp2 = jbp2(2)
<              pjtheta1 = jtheta1(2) 
<              pjtheta2 = jtheta2(2)
<           end if
<           xa = x(ia) 
<           ya = y(ia) 
<           za = z(ia)
<           xb = x(ib) 
<           yb = y(ib) 
<           zb = z(ib) 
<           xc = x(ic) 
<           yc = y(ic) 
<           zc = z(ic) 
<           xba = xa - xb 
<           yba = ya - yb 
<           zba = za - zb
<           xbc = xc - xb 
<           ybc = yc - yb 
<           zbc = zc - zb
< 
<           rba2 = xba**2 + yba**2 + zba**2
<           rba  = sqrt(rba2)
<           rba3 = rba2*rba
<           rbc2 = xbc**2 + ybc**2 + zbc**2
<           rbc  = sqrt(rbc2)
<           rbc3 = rbc2*rbc
< c
< c         terms due to bond stretching in angle
< c
< 
< c         for site a
<           frcxa1 = -(cphi(2,ib)-cphi(2,ic))*pjbp2*xba/rba
<           frcya1 = -(cphi(2,ib)-cphi(2,ic))*pjbp2*yba/rba
<           frcza1 = -(cphi(2,ib)-cphi(2,ic))*pjbp2*zba/rba
< c         for site c
<           frcxc1 = -(cphi(2,ib)-cphi(2,ia))*pjbp1*xbc/rbc
<           frcyc1 = -(cphi(2,ib)-cphi(2,ia))*pjbp1*ybc/rbc
<           frczc1 = -(cphi(2,ib)-cphi(2,ia))*pjbp1*zbc/rbc
< c         for site b
<           frcxb1 = -(frcxa1 + frcxc1) 
<           frcyb1 = -(frcya1 + frcyc1) 
<           frczb1 = -(frcza1 + frczc1) 
< 
<           dem(1,ia) = dem(1,ia) + frcxa1 
<           dem(2,ia) = dem(2,ia) + frcya1
<           dem(3,ia) = dem(3,ia) + frcza1
<           dem(1,ib) = dem(1,ib) + frcxb1
<           dem(2,ib) = dem(2,ib) + frcyb1
<           dem(3,ib) = dem(3,ib) + frczb1
<           dem(1,ic) = dem(1,ic) + frcxc1
<           dem(2,ic) = dem(2,ic) + frcyc1
<           dem(3,ic) = dem(3,ic) + frczc1
< c
< c         terms due to angle bending
< c
<           dot = xba*xbc + yba*ybc + zba*zbc
<           term1 = -rba*rbc/sqrt(rba2*rbc2-dot**2)
< 
<           term2xa = xbc/(rba*rbc) -xba*dot/(rba3*rbc)
<           term2xc = xba/(rba*rbc) -xbc*dot/(rba*rbc3)
< 
<           term2ya = ybc/(rba*rbc) -yba*dot/(rba3*rbc)
<           term2yc = yba/(rba*rbc) -ybc*dot/(rba*rbc3)
< 
<           term2za = zbc/(rba*rbc) -zba*dot/(rba3*rbc)
<           term2zc = zba/(rba*rbc) -zbc*dot/(rba*rbc3)
< 
<           frcxa2 = ( cphi(1,ia)*pjtheta1
<      &             - cphi(1,ib)*(pjtheta1+pjtheta2)
<      &             + cphi(1,ic)*pjtheta2)*term1*term2xa*radian
<           frcya2 = ( cphi(1,ia)*pjtheta1
<      &             - cphi(1,ib)*(pjtheta1+pjtheta2)
<      &             + cphi(1,ic)*pjtheta2)*term1*term2ya*radian
<           frcza2 = ( cphi(1,ia)*pjtheta1
<      &             - cphi(1,ib)*(pjtheta1+pjtheta2)
<      &             + cphi(1,ic)*pjtheta2)*term1*term2za*radian
< 
<           frcxc2 = ( cphi(1,ia)*pjtheta1
<      &             - cphi(1,ib)*(pjtheta1+pjtheta2)
<      &             + cphi(1,ic)*pjtheta2)*term1*term2xc*radian
<           frcyc2 = ( cphi(1,ia)*pjtheta1
<      &             - cphi(1,ib)*(pjtheta1+pjtheta2)
<      &             + cphi(1,ic)*pjtheta2)*term1*term2yc*radian
<           frczc2 = ( cphi(1,ia)*pjtheta1
<      &             - cphi(1,ib)*(pjtheta1+pjtheta2)
<      &             + cphi(1,ic)*pjtheta2)*term1*term2zc*radian
< c
< c         explict expression
< c
< 
< C          term2xb = -(xba+xbc)/(rba*rbc) +xba*dot/(rba3*rbc)
< C     &                                   +xbc*dot/(rba*rbc3)
< C          term2yb = -(yba+ybc)/(rba*rbc) +yba*dot/(rba3*rbc)
< C     &                                   +ybc*dot/(rba*rbc3)
< C          term2zb = -(zba+zbc)/(rba*rbc) +zba*dot/(rba3*rbc)
< C     &                                   +zbc*dot/(rba*rbc3)
< C
< C          frcxb2 = (cphi(ia)*pjtheta1
< C     &             - cphi(ib)*(pjtheta1+pjtheta2)
< C     &             + cphi(ic)*pjtheta2)*term1*term2xb*radian
< C          frcyb2 = (cphi(ia)*pjtheta1
< C     &             - cphi(ib)*(pjtheta1+pjtheta2)
< C     &             + cphi(ic)*pjtheta2)*term1*term2yb*radian
< C          frczb2 = (cphi(ia)*pjtheta1
< C     &             - cphi(ib)*(pjtheta1+pjtheta2)
< C     &             + cphi(ic)*pjtheta2)*term1*term2zb*radian
< 
< c
< c        A simpler way to calculate site b
< c
<           frcxb2 = - (frcxa2 + frcxc2)
<           frcyb2 = - (frcya2 + frcyc2)
<           frczb2 = - (frcza2 + frczc2)
< 
<           dem(1,ia) = dem(1,ia) + frcxa2 
<           dem(2,ia) = dem(2,ia) + frcya2
<           dem(3,ia) = dem(3,ia) + frcza2
<           dem(1,ib) = dem(1,ib) + frcxb2
<           dem(2,ib) = dem(2,ib) + frcyb2
<           dem(3,ib) = dem(3,ib) + frczb2
<           dem(1,ic) = dem(1,ic) + frcxc2
<           dem(2,ic) = dem(2,ic) + frcyc2
<           dem(3,ic) = dem(3,ic) + frczc2
<         end do
< !OMP END DO
<       end if
< c
